// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/13/2024 11:32:32"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          time_machine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module time_machine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg assign_by_index_done;
reg key_from_switches_available;
reg key_from_switches_changed;
reg reset;
reg shuffle_mem_finished;
// wires                                               
wire [7:0] current_state;
wire reset_all;
wire start_s_i_i;
wire start_shuffle;

// assign statements (if any)                          
time_machine i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.assign_by_index_done(assign_by_index_done),
	.current_state(current_state),
	.key_from_switches_available(key_from_switches_available),
	.key_from_switches_changed(key_from_switches_changed),
	.reset(reset),
	.reset_all(reset_all),
	.shuffle_mem_finished(shuffle_mem_finished),
	.start_s_i_i(start_s_i_i),
	.start_shuffle(start_shuffle)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #5000 1'b1;
	#5000;
end 

// assign_by_index_done
initial
begin
	assign_by_index_done = 1'b0;
	assign_by_index_done = #190000 1'b1;
	assign_by_index_done = #10000 1'b0;
end 

// shuffle_mem_finished
initial
begin
	shuffle_mem_finished = 1'b0;
	shuffle_mem_finished = #440000 1'b1;
	shuffle_mem_finished = #10000 1'b0;
end 

// key_from_switches_changed
initial
begin
	key_from_switches_changed = 1'b0;
	key_from_switches_changed = #610000 1'b1;
	key_from_switches_changed = #10000 1'b0;
end 

// key_from_switches_available
initial
begin
	key_from_switches_available = 1'b0;
	key_from_switches_available = #710000 1'b1;
	key_from_switches_available = #10000 1'b0;
end 
endmodule

