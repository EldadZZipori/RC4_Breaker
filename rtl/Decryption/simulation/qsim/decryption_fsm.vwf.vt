// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/17/2024 16:29:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          decryption_fsm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decryption_fsm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg encrypted_input_1_1;
reg encrypted_input_1_0;
reg encrypted_input_0_1;
reg encrypted_input_0_0;
reg reset;
reg s_data_0_1;
reg s_data_0_0;
reg s_data_1_1;
reg s_data_1_0;
reg s_data_2_1;
reg s_data_2_0;
reg s_data_3_1;
reg s_data_3_0;
reg s_data_4_1;
reg s_data_4_0;
reg start;
// wires                                               
wire [4:0] address_out;
wire [3:0] current_state;
wire [1:0] data_out;
wire decrypted_output_1_1;
wire decrypted_output_1_0;
wire decrypted_output_0_1;
wire decrypted_output_0_0;
wire done;
wire enable_write;
wire [1:0] f;

// assign statements (if any)                          
decryption_fsm i1 (
// port map - connection between master ports and signals/registers   
	.address_out(address_out),
	.clk(clk),
	.current_state(current_state),
	.data_out(data_out),
	.done(done),
	.enable_write(enable_write),
	.encrypted_input_1_1(encrypted_input_1_1),
	.encrypted_input_1_0(encrypted_input_1_0),
	.encrypted_input_0_1(encrypted_input_0_1),
	.encrypted_input_0_0(encrypted_input_0_0),
	.f(f),
	.reset(reset),
	.s_data_0_1(s_data_0_1),
	.s_data_0_0(s_data_0_0),
	.s_data_1_1(s_data_1_1),
	.s_data_1_0(s_data_1_0),
	.s_data_2_1(s_data_2_1),
	.s_data_2_0(s_data_2_0),
	.s_data_3_1(s_data_3_1),
	.s_data_3_0(s_data_3_0),
	.s_data_4_1(s_data_4_1),
	.s_data_4_0(s_data_4_0),
	.start(start)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// start
initial
begin
	start = 1'b0;
	start = #20000 1'b1;
	start = #930000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #10000 1'b1;
	reset = #110000 1'b0;
end 

// s_data[0][1]
initial
begin
	s_data_0_1 = 1'b0;
end 

// s_data[0][0]
initial
begin
	s_data_0_0 = 1'b0;
end 

// s_data[1][1]
initial
begin
	s_data_1_1 = 1'b1;
end 

// s_data[1][0]
initial
begin
	s_data_1_0 = 1'b0;
end 

// s_data[2][1]
initial
begin
	s_data_2_1 = 1'b0;
end 

// s_data[2][0]
initial
begin
	s_data_2_0 = 1'b0;
end 

// s_data[3][1]
initial
begin
	s_data_3_1 = 1'b0;
end 

// s_data[3][0]
initial
begin
	s_data_3_0 = 1'b1;
end 

// s_data[4][1]
initial
begin
	s_data_4_1 = 1'b1;
end 

// s_data[4][0]
initial
begin
	s_data_4_0 = 1'b1;
end 

// encrypted_input[1][1]
initial
begin
	encrypted_input_1_1 = 1'b1;
end 

// encrypted_input[1][0]
initial
begin
	encrypted_input_1_0 = 1'b0;
end 

// encrypted_input[0][1]
initial
begin
	encrypted_input_0_1 = 1'b0;
end 

// encrypted_input[0][0]
initial
begin
	encrypted_input_0_0 = 1'b0;
end 
endmodule

