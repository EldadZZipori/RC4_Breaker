// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/14/2024 20:49:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          determine_valid_message
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module determine_valid_message_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg decrypt_done;
reg decrypted_data_0_7;
reg decrypted_data_0_6;
reg decrypted_data_0_5;
reg decrypted_data_0_4;
reg decrypted_data_0_3;
reg decrypted_data_0_2;
reg decrypted_data_0_1;
reg decrypted_data_0_0;
reg decrypted_data_1_7;
reg decrypted_data_1_6;
reg decrypted_data_1_5;
reg decrypted_data_1_4;
reg decrypted_data_1_3;
reg decrypted_data_1_2;
reg decrypted_data_1_1;
reg decrypted_data_1_0;
reg decrypted_data_2_7;
reg decrypted_data_2_6;
reg decrypted_data_2_5;
reg decrypted_data_2_4;
reg decrypted_data_2_3;
reg decrypted_data_2_2;
reg decrypted_data_2_1;
reg decrypted_data_2_0;
reg decrypted_data_3_7;
reg decrypted_data_3_6;
reg decrypted_data_3_5;
reg decrypted_data_3_4;
reg decrypted_data_3_3;
reg decrypted_data_3_2;
reg decrypted_data_3_1;
reg decrypted_data_3_0;
reg decrypted_data_4_7;
reg decrypted_data_4_6;
reg decrypted_data_4_5;
reg decrypted_data_4_4;
reg decrypted_data_4_3;
reg decrypted_data_4_2;
reg decrypted_data_4_1;
reg decrypted_data_4_0;
reg reset;
// wires                                               
wire finish;
wire key_valid;

// assign statements (if any)                          
determine_valid_message i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.decrypt_done(decrypt_done),
	.decrypted_data_0_7(decrypted_data_0_7),
	.decrypted_data_0_6(decrypted_data_0_6),
	.decrypted_data_0_5(decrypted_data_0_5),
	.decrypted_data_0_4(decrypted_data_0_4),
	.decrypted_data_0_3(decrypted_data_0_3),
	.decrypted_data_0_2(decrypted_data_0_2),
	.decrypted_data_0_1(decrypted_data_0_1),
	.decrypted_data_0_0(decrypted_data_0_0),
	.decrypted_data_1_7(decrypted_data_1_7),
	.decrypted_data_1_6(decrypted_data_1_6),
	.decrypted_data_1_5(decrypted_data_1_5),
	.decrypted_data_1_4(decrypted_data_1_4),
	.decrypted_data_1_3(decrypted_data_1_3),
	.decrypted_data_1_2(decrypted_data_1_2),
	.decrypted_data_1_1(decrypted_data_1_1),
	.decrypted_data_1_0(decrypted_data_1_0),
	.decrypted_data_2_7(decrypted_data_2_7),
	.decrypted_data_2_6(decrypted_data_2_6),
	.decrypted_data_2_5(decrypted_data_2_5),
	.decrypted_data_2_4(decrypted_data_2_4),
	.decrypted_data_2_3(decrypted_data_2_3),
	.decrypted_data_2_2(decrypted_data_2_2),
	.decrypted_data_2_1(decrypted_data_2_1),
	.decrypted_data_2_0(decrypted_data_2_0),
	.decrypted_data_3_7(decrypted_data_3_7),
	.decrypted_data_3_6(decrypted_data_3_6),
	.decrypted_data_3_5(decrypted_data_3_5),
	.decrypted_data_3_4(decrypted_data_3_4),
	.decrypted_data_3_3(decrypted_data_3_3),
	.decrypted_data_3_2(decrypted_data_3_2),
	.decrypted_data_3_1(decrypted_data_3_1),
	.decrypted_data_3_0(decrypted_data_3_0),
	.decrypted_data_4_7(decrypted_data_4_7),
	.decrypted_data_4_6(decrypted_data_4_6),
	.decrypted_data_4_5(decrypted_data_4_5),
	.decrypted_data_4_4(decrypted_data_4_4),
	.decrypted_data_4_3(decrypted_data_4_3),
	.decrypted_data_4_2(decrypted_data_4_2),
	.decrypted_data_4_1(decrypted_data_4_1),
	.decrypted_data_4_0(decrypted_data_4_0),
	.finish(finish),
	.key_valid(key_valid),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #20000 1'b1;
	#20000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// decrypted_data[0][7]
initial
begin
	decrypted_data_0_7 = 1'b0;
end 

// decrypted_data[0][6]
initial
begin
	decrypted_data_0_6 = 1'b1;
end 

// decrypted_data[0][5]
initial
begin
	decrypted_data_0_5 = 1'b1;
end 

// decrypted_data[0][4]
initial
begin
	decrypted_data_0_4 = 1'b0;
end 

// decrypted_data[0][3]
initial
begin
	decrypted_data_0_3 = 1'b0;
end 

// decrypted_data[0][2]
initial
begin
	decrypted_data_0_2 = 1'b0;
end 

// decrypted_data[0][1]
initial
begin
	decrypted_data_0_1 = 1'b0;
end 

// decrypted_data[0][0]
initial
begin
	decrypted_data_0_0 = 1'b1;
end 

// decrypted_data[1][7]
initial
begin
	decrypted_data_1_7 = 1'b0;
end 

// decrypted_data[1][6]
initial
begin
	decrypted_data_1_6 = 1'b1;
end 

// decrypted_data[1][5]
initial
begin
	decrypted_data_1_5 = 1'b1;
end 

// decrypted_data[1][4]
initial
begin
	decrypted_data_1_4 = 1'b0;
end 

// decrypted_data[1][3]
initial
begin
	decrypted_data_1_3 = 1'b0;
end 

// decrypted_data[1][2]
initial
begin
	decrypted_data_1_2 = 1'b1;
end 

// decrypted_data[1][1]
initial
begin
	decrypted_data_1_1 = 1'b1;
end 

// decrypted_data[1][0]
initial
begin
	decrypted_data_1_0 = 1'b0;
end 

// decrypted_data[2][7]
initial
begin
	decrypted_data_2_7 = 1'b0;
end 

// decrypted_data[2][6]
initial
begin
	decrypted_data_2_6 = 1'b1;
end 

// decrypted_data[2][5]
initial
begin
	decrypted_data_2_5 = 1'b1;
end 

// decrypted_data[2][4]
initial
begin
	decrypted_data_2_4 = 1'b1;
end 

// decrypted_data[2][3]
initial
begin
	decrypted_data_2_3 = 1'b0;
end 

// decrypted_data[2][2]
initial
begin
	decrypted_data_2_2 = 1'b0;
end 

// decrypted_data[2][1]
initial
begin
	decrypted_data_2_1 = 1'b0;
end 

// decrypted_data[2][0]
initial
begin
	decrypted_data_2_0 = 1'b0;
end 

// decrypted_data[3][7]
initial
begin
	decrypted_data_3_7 = 1'b0;
end 

// decrypted_data[3][6]
initial
begin
	decrypted_data_3_6 = 1'b1;
end 

// decrypted_data[3][5]
initial
begin
	decrypted_data_3_5 = 1'b1;
end 

// decrypted_data[3][4]
initial
begin
	decrypted_data_3_4 = 1'b1;
end 

// decrypted_data[3][3]
initial
begin
	decrypted_data_3_3 = 1'b1;
end 

// decrypted_data[3][2]
initial
begin
	decrypted_data_3_2 = 1'b0;
end 

// decrypted_data[3][1]
initial
begin
	decrypted_data_3_1 = 1'b1;
end 

// decrypted_data[3][0]
initial
begin
	decrypted_data_3_0 = 1'b0;
end 

// decrypted_data[4][7]
initial
begin
	decrypted_data_4_7 = 1'b0;
end 

// decrypted_data[4][6]
initial
begin
	decrypted_data_4_6 = 1'b0;
end 

// decrypted_data[4][5]
initial
begin
	decrypted_data_4_5 = 1'b0;
end 

// decrypted_data[4][4]
initial
begin
	decrypted_data_4_4 = 1'b0;
end 

// decrypted_data[4][3]
initial
begin
	decrypted_data_4_3 = 1'b1;
end 

// decrypted_data[4][2]
initial
begin
	decrypted_data_4_2 = 1'b0;
end 

// decrypted_data[4][1]
initial
begin
	decrypted_data_4_1 = 1'b1;
end 

// decrypted_data[4][0]
initial
begin
	decrypted_data_4_0 = 1'b1;
end 

// decrypt_done
initial
begin
	decrypt_done = 1'b0;
	decrypt_done = #10000 1'b1;
	decrypt_done = #50000 1'b0;
end 
endmodule

